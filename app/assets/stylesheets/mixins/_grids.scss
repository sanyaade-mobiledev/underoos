
// Grids based on the semantic grid system: http://semantic.gs/
// ----------------------------------------------------------------------------

/*
TODO: Test out the Fluid layouts using percentages
TODO: Document and test all of these thoroughly
*/

// Set up a horizontal page grid
@mixin grid-settings($page-wv:984px, $col-wv:70px, $gutter-wv:12px, $num-cols:12) {
  $page-width: $page-wv;
  $column-width: $col-wv;
  $gutter-width: $gutter-wv;
  $columns: $num-cols;
  $_gridsystem-width: ($column-width * $columns) + ($gutter-width * $columns);

  @if $page-wv == 100% {
    $total-width: $page-wv;
  } @else {
    $total-width: $_gridsystem-width;
  }
}

// Utility function for returning the width value of a particular column
@function column-width($x, $border-offset:0, $columns:$columns) {
  $_width: ($total-width * (((($gutter-width + $column-width) * $x) - $gutter-width) / $_gridsystem-width)) - $border-offset;
  @return $_width;
}

@function column-pull-width($x, $border-offset:0, $columns:$columns) {
  @return column-width($x, $border-offset, $columns) + ($gutter-width * .5);
}

@function column-push-width($x, $border-offset:0, $columns:$columns) {
  @return column-pull-width($x, $border-offset, $columns);
}

@function column-full-width($x, $border-offset:0, $columns:$columns) {
  @return column-width($x, $border-offset, $columns) + ($gutter-width);
}

// Used for nested columns: @include row(10)
@mixin row($x, $border-offset:0, $columns:$columns) {
  $_margin-value: $total-width * ((($gutter-width * .5) / $_gridsystem-width) * -1);
  $_width: column-width($x, $border-offset, $columns) + $gutter-width;

  @include inline-block;
  overflow: hidden;
  margin-left: $_margin-value;
  margin-right: $_margin-value;
  width: $_width;
}

// Draws a default column with optional offset for borders: @include column(10)
// The third paramater for columns is only used for nested columns
@mixin column($x, $border-offset:0, $columns:$columns) {
  $_margin-value: $total-width * (($gutter-width * .5) / $_gridsystem-width);
  $_width: ($total-width * (((($gutter-width + $column-width) * $x) - $gutter-width) / $_gridsystem-width)) - $border-offset;

  display: inline;
  float: left;
  margin-left: $_margin-value;
  margin-right: $_margin-value;
  width: $_width;
}

@mixin row-pull($x, $border-offset:0, $columns:$columns) {
  @include row($x, $border-offset, $columns);
  margin-left: 0;
  width: column-full-width($x, $border-offset, $columns);
}

// Draws a column and pulls it with a margin-left of "0" and adjusts width: @include column-pull(8);
@mixin column-pull($x, $border-offset:0, $columns:$columns, $resize:true) {
  @include column($x, $border-offset, $columns);
  margin-left: 0;
  @if $resize == true {
    width: column-pull-width($x, $border-offset, $columns);
  } @else {
    width: column-width($x, $border-offset, $columns);
  }
}

@mixin row-push($x, $border-offset:0, $columns:$columns) {
  @include row($x, $border-offset, $columns);
  margin-right: 0;
  width: column-full-width($x, $border-offset, $columns);
}

// Draws a column and pushes it with a margin-right of "0" and adjust width: @include column-push(8);
@mixin column-push($x, $border-offset:0, $columns:$columns, $resize:true) {
  @include column($x, $border-offset, $columns);
  margin-right: 0;
  @if $resize == true {
    width: column-push-width($x, $border-offset, $columns);
  } @else {
    width: column-width($x, $border-offset, $columns);
  }
}

@mixin row-full($x, $border-offset:0, $columns:$columns) {
  @include row($x, $border-offset, $columns);
  margin-left: 0;
  margin-right: 0;
  width: column-full-width($x, $border-offset, $columns);
}

// Draws a column and pulls and pushes it with a left/right margins and adjusts width: @include column-full(8);
@mixin column-full($x, $border-offset:0, $columns:$columns) {
  @include column($x, $border-offset, $columns);
  margin-left: 0;
  margin-right: 0;
  width: column-full-width($x, $border-offset, $columns);
}

// Draws margin left gap by column amount before rendering the column: @include column-offset(8, 0, 4);
@mixin column-offset($x, $border-offset:0, $offset-amount:0, $columns:$columns) {
  @include column($x, $border-offset, $columns);
  $_gap: $gutter-width + ($gutter-width * .5);
  margin-left: column-width($offset-amount) + $_gap;
}

// Draws a margin left gap by a column amount before rendering a normal pull column: @include column-offset-pull(8, 0, 4);
@mixin column-offset-pull($x, $border-offset:0, $offset-amount:0, $columns:$columns) {
  @include column($x, $border-offset, $columns);
  $_gap: $gutter-width * .5;
  margin-left: column-width($offset-amount) + $gutter-width;
  width: column-width($x, $border-offset, $columns) + $_gap;
}

// Draws a margin left gap by a column amount before rendering a normal push column: @include column-offset-push(8, 0, 4);
@mixin column-offset-push($x, $border-offset:0, $offset-amount:0, $columns:$columns) {
  @include column-offset($x, $border-offset, $offset-amount, $columns);
  $_gap: $gutter-width * .5;
  width: column-width($x, $border-offset, $columns) + $_gap;
}

// Draws a margin left gap by a column amount before rendering a normal push and pull column: @include column-offset-full(8, 0, 4);
@mixin column-offset-full($x, $border-offset:0, $offset-amount:0, $columns:$columns) {
  @include column-offset($x, $border-offset, $offset-amount, $columns);
  margin-left: column-width($offset-amount) + $gutter-width;
  width: column-width($x, $border-offset, $columns) + ($gutter-width);
}

